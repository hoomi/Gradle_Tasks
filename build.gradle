/**
    Gradle's life cycle
    1. Initialization: It is the phase where gradle decides which projects participate in the build
    2. Configuration: It is the phase where those task objects are assembled to internal objects
    3. Execution: It is the phase where tasks are executed in order required by their dependency relationships

    Some notes on Gradle:
    - All tasks on gradle extend DefaultTask similar to all objects in java extend Object class
    **/
// Example 2.5
task hello

hello << {
    print "Hello, "
}

hello << {
    println "world!!"
}

// Example 2.6
task initializeDatabase

initializeDatabase << {println "Connect to database"}
initializeDatabase << {println "Update database schema"}
// Without the "<<" operator the following line is a configuration block
// It will be executed at Gradle's configuration lifecycle
initializeDatabase {println "Configuring database connection"}

task initializeDatabase2

initializeDatabase2 {println "Connect to database"}
initializeDatabase2 {println "Update database schema"}

initializeDatabase2 {print "Configuring "}
initializeDatabase2 {println "database connection"}

// Example 2-9
// dependsOn adds dependency to a task
task createSchema << { 
    println "This is createSchema"
}

task loadTestData {
    dependsOn createSchema
}

loadTestData << {
    println "loadTestData"
}

task loadTestData2 {
    dependsOn << createSchema
}

loadTestData2 << {
    println "loadTestData2"
}

task loadTestData3 {
    dependsOn 'createSchema'
}

loadTestData3 << {
    println "loadTestData3"
}


task loadTestData4 << {
    println "loadTestData4"
}
loadTestData4.dependsOn createSchema

task loadTestData5(dependsOn: createSchema) << {
    println "loadTestData5"
}

// Example 2-10
// Declaring several dependecies
// The order of declaring the dependecy does not make a difference in the order that they are executed

task compileTestData << {
    println "This is compileTestData"
}

task loadCompiledTestData {
    dependsOn << compileTestData
    dependsOn << createSchema
}

// Checking the order of the dependecies
task loadCompiledTestData2  {
    dependsOn << createSchema
    dependsOn << compileTestData    
}

task loadCompiledTestData3 {
    dependsOn compileTestData, createSchema
}

task loadCompiledTestData4(dependsOn: [createSchema, compileTestData])

task loadCompiledTestData5
loadCompiledTestData5.dependsOn createSchema, compileTestData

// Example 2-11

task pluginTask << {
    println "This is pluginTask normal execution"
}

pluginTask.doFirst {
    println "createSchema"
}

pluginTask.doFirst {
    println "compileData"
}

// Example 2-13

task setupDatabaseTable << {
    println "Setting up database"
}

setupDatabaseTable.doFirst {
    println "[doFirst]Create Schema"
}

// Example 2-14

setupDatabaseTable.doFirst {
    println "[doFirst]Drop old database"
}

// Example 2-16

task setupDatabaseTests << {
    println "Setting database tests"
}

setupDatabaseTests {
    doFirst {
        println "[doFirst]Create Schema"
    }

    doFirst {
        println "[doFirst]Drop old database"
    }
}

// Example 2-17

setupDatabaseTests.doLast {
    println "[doLast]Load test data"
}

// Example 2-18

setupDatabaseTests.doLast {
    println "[doLast]Update database version"
}

// Example 2-19

task loadTestData6(dependsOn: createSchema) << {
    println 'Loading Test Data 6'
}

// In order to set the System.properties['load.data'] we need to add -Dload.data=true to the gradle command
// from the command line. i.e "gradle -Dload.data=true loadTestData6"
loadTestData6.onlyIf {
    System.properties['load.data'] == 'true'
}

task createSchema2 << {
    println 'Create Schema 2'
}
// The command for this to run is gradle -Dload.data='true' -DHooman=Hooman createSchema2
createSchema.onlyIf {
    System.properties['Hooman'] == 'Hooman'
}

